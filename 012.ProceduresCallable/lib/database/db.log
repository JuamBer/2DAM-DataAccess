/*C3*/SET SCHEMA PUBLIC
DROP PROCEDURE set_new_department IF EXISTS
DROP PROCEDURE set_new_teacher IF EXISTS
DROP PROCEDURE set_salary IF EXISTS
DROP PROCEDURE rise_salary_prct IF EXISTS
DROP PROCEDURE rise_salary_per_dept IF EXISTS
DROP PROCEDURE get_newest_teacher IF EXISTS
DROP PROCEDURE count_teachers IF EXISTS
CREATE PROCEDURE set_new_department(IN id INT, IN name VARCHAR(15), IN office VARCHAR(15)) MODIFIES SQL DATA BEGIN ATOMIC  INSERT INTO departments VALUES id,name,office; END
CREATE PROCEDURE set_new_teacher(IN id INT, IN name VARCHAR(15), IN surname VARCHAR(15), IN email VARCHAR(15), IN start_date VARCHAR(15), IN id_department INT, IN salary INT) MODIFIES SQL DATA BEGIN ATOMIC  INSERT INTO teachers VALUES id,name,surname,email,start_date,id_department,salary; END
CREATE PROCEDURE set_salary(IN salar INT) MODIFIES SQL DATA BEGIN ATOMIC  UPDATE teachers SET teachers.salary=salar; END
CREATE PROCEDURE rise_salary_prct(IN p FLOAT) MODIFIES SQL DATA BEGIN ATOMIC  DECLARE OP INT;  SET OP = p/10;  UPDATE teachers SET teachers.salary=salary*OP; END
CREATE PROCEDURE rise_salary_per_dept(p FLOAT, dept_nam VARCHAR(15)) MODIFIES SQL DATA BEGIN ATOMIC  DECLARE OP INT;  SET OP = p/10;  UPDATE teachers SET teachers.salary=salary*OP WHERE teachers.dept_num LIKE dept_nam; END
CREATE PROCEDURE get_newest_teacher(OUT res VARCHAR(15)) MODIFIES SQL DATA BEGIN ATOMIC  DECLARE QUERYDATE DATE;  DECLARE QUERYNAME VARCHAR(15);  SET QUERYDATE = SELECT MAX(start_date) FROM teachers; SET QUERYNAME = SELECT name FROM teachers WHERE start_date=QUERYDATE LIMIT 1; SET res = QUERYNAME;END
CREATE PROCEDURE count_teachers(IN dept_nam VARCHAR(15), OUT res INT) READS SQL DATA BEGIN ATOMIC  DECLARE NUMTEACHERS INT;  SET NUMTEACHERS = SELECT COUNT(name) FROM teachers WHERE teachers.dept_num=dept_nam; SET res = NUMTEACHERS; END
